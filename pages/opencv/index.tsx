import cv from "@techstark/opencv-js";
import axios from "axios";
import Head from "next/head";
import * as ort from "onnxruntime-web";
import React, { useEffect, useRef, useState } from "react";
import Navbar from "../../components/Navbar";
import { detect } from "../../utils";
import styles from "../../styles/Home.module.css";

const API_URL = process.env.NEXT_PUBLIC_API_URL;

export default function Home() {
  const canvasRef = useRef<HTMLCanvasElement>();
  const imgRef = useRef<HTMLImageElement>();
  const [session, setSession] = useState<ort.InferenceSession>();
  const [status, setStatus] = useState("");

  const initModel = async () => {
    // buffalo_s/det_500m.ort
    // buffalo_s/det_500m.with_runtime_opt.ort
    // buffalo_l/det_10g.ort
    try {
      const modelBuffer = await axios.get<Uint8Array>(
        `${API_URL}/models/buffalo_s/det_500m.with_runtime_opt.ort`,
        {
          responseType: "arraybuffer",
          withCredentials: false,
        }
      );

      const _session = await ort.InferenceSession.create(modelBuffer.data);
      setSession(_session);
    } catch (error) {
      console.error(error);
    }
  };

  function handleFileChange(event: React.ChangeEvent<HTMLInputElement>) {
    const files = event.target.files;
    const image = imgRef.current;
    const canvas = canvasRef.current;
    if (!files || files.length === 0 || !image || !canvas) {
      return;
    }

    image.onload = async () => {
      let mat = cv.imread(image);
      if (mat.rows < mat.cols) {
        image.style.height = 'auto';
        image.style.width = '640px';
        mat = cv.imread(image);
      }
      await cv.imshow(canvas, mat);
    }

    const file = files[0];
    let fr = new FileReader();
    fr.readAsDataURL(file);
    fr.onload = async (event: ProgressEvent<FileReader>) => {
      if (event.target?.readyState === FileReader.DONE) {
        if (typeof(event.target.result) === 'string') {
            image.src = event.target.result;
          }
      }
    };
  }

  async function runDetection() {
    const scoreThreshold = 0.5;
    const nmsThreshold = 0.4;

    let image = imgRef.current;
    const canvas = canvasRef.current;
    if (!canvas || !image || !session) {
      return;
    }

    const picks = await detect(image, session, scoreThreshold, nmsThreshold);

    const ctx = canvas.getContext("2d");
    if (!ctx) {
      return;
    }
    for (let bbox of picks) {
      ctx.beginPath();
      ctx.rect(bbox.x1, bbox.y1, bbox.width, bbox.height);
      ctx.strokeStyle = "red";
      ctx.stroke();
    }
  }

  useEffect(() => {
    setStatus("Loading model...");
    initModel();

    console.log('Initializing opencvjs runtime...');
    cv['onRuntimeInitialized']=()=>{
      // do all your work here
      console.log('opencvjs runtime initialized');
    };
  }, []);

  useEffect(() => {
    if (session) {
      setStatus("Model loaded!");
      console.log(session);
    }
  }, [session]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Navbar />
        <h1>Test</h1>
        <div>
          <label className="btn">file: </label>
          <input id="file" type="file" onChange={handleFileChange} />
          <button type="button" onClick={runDetection} disabled={!session}>
            Detect Face
          </button>
        </div>
        <div style={{ display: "flex" }}>
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <img
              src=""
              alt="testimg"
              ref={imgRef}
              style={{ width: "auto", height: 640, margin: 32 }}
            />
            <p>512 x 640</p>
          </div>
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <canvas
              width={640}
              height={640}
              style={{ margin: 32 }}
              ref={canvasRef}
            ></canvas>
            <p>640 x 640</p>
          </div>
        </div>
        <h2>{status}</h2>
        {session && (
          <div>
            <pre>{JSON.stringify(session, null, 2)}</pre>
          </div>
        )}
      </main>
    </div>
  );
}
